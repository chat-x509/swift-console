// Generated by ASN1.ERP.UNO Compiler, Copyright Â© 2023 Namdak Tonpa.
import SwiftASN1
import Crypto
import Foundation

// 'NameRDN':encode('Name',{'rdnSequence',[[{'AttributeTypeAndValue',{2,5,4,6},<<19,2,85,65>>}]]}).
// {ok,<<48,13,49,11,48,9,6,3,85,4,6,19,2,85,65>>}

@usableFromInline indirect enum Name: DERParseable, DERSerializable, Hashable, Sendable {
    case rdnSequence([[AttributeTypeAndValue]])
    @inlinable init(derEncoded root: ASN1Node) throws {
        switch root.identifier {
            case ASN1Identifier2.sequenceOf:
                var w: [[AttributeTypeAndValue]] = []
                try DER.sequence(root, identifier: .sequence) { nodes in
                     var w1: [AttributeTypeAndValue] = []
                     while let node = nodes.next() {
                       w1.append(contentsOf:
                          try DER.set(of: AttributeTypeAndValue.self, identifier: .set, rootNode: node))
                     }
                     w.append(w1)
                }
                self = Name.rdnSequence(w)
            default: throw ASN1Error.unexpectedFieldType(root.identifier)
        }

    }
    @inlinable func serialize(into coder: inout DER.Serializer) throws {
        switch self {
            case .rdnSequence(let rdnSequence): try coder.serialize(true)
        }
    }

}
